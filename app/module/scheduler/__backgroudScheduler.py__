from pytz import utc

from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.jobstores.mongodb import MongoDBJobStore
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from apscheduler.executors.pool import ThreadPoolExecutor, ProcessPoolExecutor

jobstores = {
    # 'mongo': MongoDBJobStore(),
    # 'default': SQLAlchemyJobStore(url='sqlite:///jobs.sqlite')
}
executors = {
    'default': ThreadPoolExecutor(20),
    'processpool': ProcessPoolExecutor(5)
}
job_defaults = {
    'coalesce': False,
    'max_instances': 3
}

scheduler = BackgroundScheduler(
                jobstores=jobstores, 
                executors=executors, 
                job_defaults=job_defaults, 
                timezone=utc
            )

scheduler.start()

# def _stock_load():
#     '''주식종목코드 load'''
#     pass




# def myfunc(*args, **kwargs):
#     print(*args)
#     print(**kwargs)
#     import datetime
#     with open('test1.txt', mode='w', encoding='utf-8') as f:
#         f.write(str(datetime.datetime.now()))
#         for key in kwargs:
#             f.write('{} : {}'.format(key, kwargs.get(key)))
#             print('{} : {}'.format(key, kwargs.get(key)))

# scheduler.add_job(myfunc, 'interval', minutes=2, id='my_job_id')
# scheduler.add_job(myfunc, trigger='cron', second=1=2, id='my_job_id3')
# scheduler.add_job(myfunc, 'cron', {'a':'test', 'b':'tttt'}, second=1, id='my_job_id4')
# # scheduler.remove_job('my_job_id')

# from apscheduler.events import EVENT_JOB_EXECUTED , EVENT_JOB_ERROR
# scheduler.add_listener(my_listener, EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)



scheduler.add_job(myfunc, 'calendarinterval', second=1, id='my_job_id4')

#scheduler.shutdown()  